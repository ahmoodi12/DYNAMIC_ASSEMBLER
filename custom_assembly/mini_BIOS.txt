# custom_assembly\mini_BIOS.txt isa_files\minimal_cpu.json -f lgsm -e big -d -s 63488

.def boot_str, $0xf7b0
.def command_str, $0xf7da
.def command_draw, $0xf7eb
.def command_exit, $0xf7f0

.org boot_str
.val "Booting...\npress del to enter cmd prompt"
.val 0

.org command_str
.val "command prompt:\n"
.val 0

.org command_draw
.val "draw"
.val 0

.org command_exit
.val "exit"
.val 0

// interrupt vector
.org $0xf7ff
.val 0x1000

.include "mini_definitions.txt"


.org $0xf700
init:
    clr true, sp
    ldi true, r1, boot_str
    call print_str
    
    wait:
        ldi true, r0, 0xff
        lodi true, buttons, r1
        testi r1, 0x20            # check if the esc button was pressed
        jmpi nz, print_prompt     # if z = 0
        for r0, wait 

    ldi true, r0, 0x80
    stoi true, text_disp, r0
    jmpi true, skip_terminal

    print_prompt:
        ldi true, r0, 0x80
        stoi true, text_disp, r0
        ldi true, r1, command_str
        call print_str
        jmpi, true command_prompt


    skip_terminal:

    ldi true, r0, 0xf5ff
    stoi true, rom_end, r0
    clr true, r0
    stoi true, rom_start, r0

    clr true, r1
    clr true, r2
    clr true, r3
    clr true, r4
    clr true, r5
    clr true, r6
    clr true, r7
    clr true, r8
    clr true, r9
    clr true, r10
    clr true, r11
    clr true, r12
    clr true, flags
    clr true, sp
    hlt


// infinite loop unless broken
command_prompt:
    ldi true, r1, command_exit
    call check_for_str_in_keyboard
    jmpi ca, halt

    jmpi true, command_prompt
    
halt:
    hlt
    
    
    
    
    
    
    
    
    
    
       